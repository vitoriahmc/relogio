-- Copyright (C) 2016  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Intel and sold by Intel or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- Generated by Quartus Prime Version 16.1.0 Build 196 10/24/2016 SJ Lite Edition
-- Created on Wed Sep 26 17:50:52 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY SM1 IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        Z : IN STD_LOGIC := '0';
        controle : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
    );
END SM1;

ARCHITECTURE BEHAVIOR OF SM1 IS
    TYPE type_fstate IS (IncrementaUH,ComparaUHCom10,ZeraUH);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
    SIGNAL reg_controle : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000000000000";
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,Z,reg_controle)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= IncrementaUH;
            reg_controle <= "000000000000";
            controle <= "000000000000";
        ELSE
            reg_controle <= "000000000000";
            controle <= "000000000000";
            CASE fstate IS
                WHEN IncrementaUH =>
                    reg_fstate <= ComparaUHCom10;

                    reg_controle <= "000000001000";
                WHEN ComparaUHCom10 =>
                    IF ((Z = '1')) THEN
                        reg_fstate <= ZeraUH;
                    ELSIF (NOT((Z = '1'))) THEN
                        reg_fstate <= IncrementaUH;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= ComparaUHCom10;
                    END IF;

                    reg_controle <= "100000000000";
                WHEN ZeraUH =>
                    reg_fstate <= IncrementaUH;

                    reg_controle <= "010000000000";
                WHEN OTHERS => 
                    reg_controle <= "XXXXXXXXXXXX";
                    report "Reach undefined state";
            END CASE;
            controle <= reg_controle;
        END IF;
    END PROCESS;
END BEHAVIOR;
